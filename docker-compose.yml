services:
  config-server:
    build: ./server/config-server
    ports:
      - "8888:8888"
    networks:
      - app-net
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CLOUD_CONFIG_SERVER_GIT_URI=https://github.com/mandeotv1234/graduation-project-config

  discovery-server:
    build: ./server/discovery-server
    ports:
      - "8761:8761"
    networks:
      - app-net
    depends_on:
      - config-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CLOUD_CONFIG_URI=http://localhost:8888

  user-service:
    build: ./server/user-service
    ports:
      - "8081:8081"
    networks:
      - app-net
    depends_on:
      - discovery-server
      - postgres-user
      - config-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CLOUD_CONFIG_URI=http://localhost:8888
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-user:5433/user_service_db
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=password
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://discovery-server:8761/eureka

  # Kong Database
  kong-database:
    image: postgres:15
    container_name: kong-database
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kongpass
      POSTGRES_DB: kong
    networks:
      - app-net
    volumes:
      - kong_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kong Migration
  kong-migration:
    image: kong:3.4
    container_name: kong-migration
    command: "kong migrations bootstrap"
    depends_on:
      kong-database:
        condition: service_healthy
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
    networks:
      - app-net
    restart: "no"

  # Kong Gateway
  kong:
    image: kong:3.4
    container_name: kong-gateway
    depends_on:
      kong-migration:
        condition: service_completed_successfully
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    ports:
      - "8000:8000"   # Kong Proxy
      - "8443:8443"   # Kong Proxy SSL
      - "8001:8001"   # Kong Admin API
      - "8444:8444"   # Kong Admin API SSL
      - "8002:8002"   # Kong Manager
      - "8445:8445"   # Kong Manager SSL
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kong Dashboard (Optional)
  konga:
    image: pantsel/konga:0.14.9
    container_name: konga
    depends_on:
      - kong
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_USER: kong
      DB_PASSWORD: kongpass
      DB_DATABASE: konga
      KONGA_HOOK_TIMEOUT: 120000
      NODE_ENV: production
    ports:
      - "1337:1337"
    networks:
      - app-net

  postgres-user:
    image: postgres:15
    container_name: postgres-user
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: user_service_db
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5433:5432"
    networks:
      - app-net
    volumes:
      - postgres_user_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_user_data:
  kong_data:

networks:
  app-net:
    driver: bridge